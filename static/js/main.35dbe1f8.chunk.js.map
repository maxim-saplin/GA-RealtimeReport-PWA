{"version":3,"sources":["actions/index.js","reducers/auth.js","reducers/network.js","reducers/gaData.js","reducers/service.js","reducers/index.js","misc/ConditionalRoute.js","components/AccountSelection.js","containers/AccountSelection.js","containers/Navigation.js","components/Status.js","containers/Status.js","components/Users.js","containers/UsersNow.js","containers/UsersToday.js","App.js","serviceWorker.js","index.js"],"names":["authorizeAuto","type","authorizationFailed","autoMode","authorizationOk","authReceiveAccounts","accounts","gaGetAllData","viewId","gaGetRtData","gaReceiveRtData","data","reAuth","gaGetData","gaReceiveData","prevViewId","CLIENT_ID","SCOPES","authorize","useImmdiate","authData","client_id","scope","immediate","window","gapi","auth","response","error","Error","getAccounts","client","analytics","management","list","then","result","items","length","accs","map","i","id","name","webproperties","forEach","a","properties","filter","p","accountId","profiles","views","v","webPropertyId","console","log","state","authorized","authorizing","action","loop","Cmd","run","successActionCreator","actions","failActionCreator","args","setToken","signOut","proceedActions","currentAccount","push","availableAccounts","flag","account","resumeGaDataRetrieval","dispatch","getState","network","online","navigator","onLine","timeoutRt","timeout","getRtData","realtime","get","usersNow","totalsForAllResults","countriesAndUsersNow","rows","catch","status","getData","ga","usersToday","countriesAndUsersToday","gaData","fetching","clearTimeout","setTimeout","service","serializedState","undefined","localStorage","getItem","JSON","parse","stringify","setItem","reduceReducers","combineReducers","ConditionalRoute","Component","component","conditionEval","rest","render","props","to","pathname","referrer","location","Authorize","onAccountChoice","getItemById","propertyId","acc","prp","vw","property","view","onChange","e","target","value","key","connect","AccountSelection","onSignIn","onSignOut","history","onClick","Status","Users","users","countriesAndUsers","title","class","basename","process","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","store","createStore","rootReducer","install","ReactDOM","className","Navigation","exact","path","UsersNow","UsersToday","document","getElementById","gapiLoaded","loadGapi","script","createElement","onload","load","src","head","appendChild","addEventListener","URL","href","origin","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.35dbe1f8.chunk.js","sourcesContent":["export const AUTHORIZE_AUTO = \"AUTHORIZE_AUTO\";\nexport const AUTHORIZE_MANUAL = \"AUTHORIZE_MANUAL\";\nexport const AUTHORIZE_SINGOUT = \"AUTHORIZE_SINGOUT\";\nexport const AUTHORIZATION_FAILED = \"AUTHORIZATION_FAILED\";\nexport const AUTHORIZATION_OK = \"AUTHORIZATION_OK\";\nexport const AUTHORIZE_REFRESH_TOKEN = \"AUTHORIZE_REFRESH_TOKEN\";\n\nexport const AUTH_GET_ACCOUNTS = \"AUTH_GET_ACCOUNTS\";\nexport const AUTH_RECEIVE_ACCOUNTS = \"AUTH_RECEIVE_ACCOUNTS\";\nexport const AUTH_CHOOSE_ACCOUNT = \"AUTH_CHOOSE_ACCOUNT\";\n\nexport const GA_GET_ALL_DATA = \"GA_GET_ALL_DATA\";\n//Realtime\nexport const GA_GET_RT_DATA = \"GA_GET_RT_DATA\";\nexport const GA_RECEIVE_RT_DATA = \"GA_RECEIVE_RT_DATA\";\nexport const GA_RECEIVE_RT_ERROR = \"GA_RECEIVE_RT_ERROR\";\n// Not realtime\nexport const GA_GET_DATA = \"GA_GET_DATA\";\nexport const GA_RECEIVE_DATA = \"GA_RECEIVE_DATA\";\nexport const GA_RECEIVE_ERROR = \"GA_RECEIVE_ERROR\";\n\nexport const NETWORK_ONLINE= \"NETWORK_ONLINE\";\nexport const NETWORK_OFFLINE= \"NETWORK_OFFLINE\";\n\nexport const SERVICE_LOAD_STATE = \"SERVICE_LOAD_STATE\";\nexport const SERVICE_PERSIST_STATE = \"SERVICE_PERSIST_STATE\";\n\nexport const authorizeAuto = () => ({type: AUTHORIZE_AUTO});\nexport const authorizeManual = () => ({type: AUTHORIZE_MANUAL});\nexport const authorizeSingout = () => ({type: AUTHORIZE_SINGOUT});\nexport const authorizationFailed = (autoMode) => ({type: AUTHORIZATION_FAILED, autoMode});\nexport const authorizationOk = () => ({type: AUTHORIZATION_OK});\nexport const authorizationRefreshToken = (viewId) => ({type: AUTHORIZE_REFRESH_TOKEN, viewId});\n\nexport const authGetAccounts = () => ({type: AUTH_GET_ACCOUNTS});\nexport const authReceiveAccounts = (accounts) => ({type: AUTH_RECEIVE_ACCOUNTS, accounts});\nexport const authChooseAccount = (account) => ({type: AUTH_CHOOSE_ACCOUNT, account});\n\nexport const gaGetAllData = (viewId) => ( {type: GA_GET_ALL_DATA, viewId} );\nexport const gaGetRtData = (viewId) => ({type: GA_GET_RT_DATA, viewId});\nexport const gaReceiveRtData = ({data, viewId, reAuth}) => ({type: GA_RECEIVE_RT_DATA, data, viewId, reAuth});\nexport const gaReceiveRtError = (error) => ({type: GA_RECEIVE_RT_DATA, error});\nexport const gaGetData = (viewId) => ({type: GA_GET_DATA, viewId});\nexport const gaReceiveData = ({data, viewId, reAuth}) => ({type: GA_RECEIVE_DATA, data, viewId, reAuth});\nexport const gaReceiveError = (error) => ({type: GA_RECEIVE_DATA, error});\n\nexport const networkOnline = () => ({type: NETWORK_ONLINE});\nexport const networkOffline = () => ({type: NETWORK_OFFLINE});\n\nexport const serviceLoadState = () => ({type: SERVICE_LOAD_STATE});\nexport const servicePersistState = () => ({type: SERVICE_PERSIST_STATE});","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nconst CLIENT_ID = '48841825057-engcdce3j4sfo5j5v4pc3hrpe9fgv1mu.apps.googleusercontent.com';\nconst SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];\n\nfunction authorize(useImmdiate) {\n  const authData = {\n    client_id: CLIENT_ID,\n    scope: SCOPES,\n    immediate: useImmdiate\n  };\n\n  return window.gapi.auth.authorize(authData, function(response) {\n    if (response.error) {\n      throw new Error(\"window.gapi - Authorization failed\");\n    }\n  });\n}\n\nfunction getAccounts(){\n    return window.gapi.client.analytics.management.accounts.list().then(\n      response => {\n        if (response.result.items && response.result.items.length) {\n\n          let accs = response.result.items.map(i => ({id: i.id, name: i.name}));\n          \n          return window.gapi.client.analytics.management.webproperties.list(\n            {\"accountId\": \"~all\"})\n          .then(\n            response => {\n              if (response.result.items && response.result.items.length) {\n                accs.forEach(a => {\n                  a.properties = response.result.items.filter(p => p.accountId === a.id).map(p => ({id: p.id, name: p.name}));\n                });\n\n                return window.gapi.client.analytics.management.profiles.list({\n                    \"accountId\": \"~all\",\n                    \"webPropertyId\": \"~all\"\n                  })\n                  .then(\n                    response => {\n                      if (response.result.items && response.result.items.length) {\n                        accs.forEach(a => {\n                          a.properties.forEach(p => {\n                            p.views = response.result.items.filter(v => v.webPropertyId === p.id).map(v => ({id: v.id, name: v.name}));\n                          });\n                        });\n\n                        return accs;\n                      }  \n                    });\n              }\n            }\n          );\n\n        } else {\n          console.log('No accounts found for this user.');\n        }\n     }\n    );\n}\n\nlet prevViewId;\n\nconst auth = (state = {authorized: false, authorizing: false}, action) => {\n    switch (action.type) {\n      case actions.AUTHORIZE_REFRESH_TOKEN:\n        return loop(\n            state,\n            Cmd.run(() => authorize(true),\n            {\n              successActionCreator: () => actions.gaGetAllData(action.viewId)\n            }\n          )\n        );\n\n      case actions.AUTHORIZE_AUTO:\n      case actions.AUTHORIZE_MANUAL:\n        return loop(\n          {...state, authorizing: true},\n            Cmd.run(() => authorize(action.type === actions.AUTHORIZE_AUTO), \n            {\n              successActionCreator: actions.authorizationOk,\n              failActionCreator: actions.authorizationFailed,\n              args: [action.type === actions.AUTHORIZE_AUTO]\n            })\n        );\n\n      case actions.AUTHORIZATION_OK:\n        return loop(\n          {...state, authorized: true, authorizing: false},\n          Cmd.action({type: actions.AUTH_GET_ACCOUNTS})\n        );\n\n      case actions.AUTHORIZATION_FAILED:\n        return {...state, authorized: false, authorizing: false};\n\n      case actions.AUTHORIZE_SINGOUT:\n          return loop(\n            {...state, authorized: false, authorizing: false},\n            Cmd.run( () => {window.gapi.auth.setToken(null); window.gapi.auth.signOut()})\n          );\n\n      case actions.AUTH_GET_ACCOUNTS:\n        return loop(  \n          state,\n          Cmd.run(() => getAccounts(), \n            {\n              successActionCreator: actions.authReceiveAccounts\n            })\n          );\n\n      case actions.AUTH_RECEIVE_ACCOUNTS:\n        let proceedActions = [];\n        //TODO: check if currentAccount is among available accounts. If not - set current account to unset\n        if (state.currentAccount) proceedActions.push(Cmd.action({type: actions.GA_GET_ALL_DATA, viewId: state.currentAccount.viewId}));\n\n        return loop(\n          {...state, availableAccounts: action.accounts},\n          Cmd.list(proceedActions)\n        );\n\n      case actions.AUTH_CHOOSE_ACCOUNT:\n        let flag = false;  \n        if (action.account.viewId && prevViewId !== action.account.viewId) {\n          flag = true;\n          prevViewId = action.account.viewId;\n        }\n        if (flag){\n          return loop(\n            {...state, currentAccount: action.account},\n            Cmd.list([\n              Cmd.action({type: actions.GA_GET_ALL_DATA, viewId: action.account.viewId}),\n              Cmd.action({type: actions.SERVICE_PERSIST_STATE}),\n            ])\n          );\n        }\n        return {...state, currentAccount: action.account};\n\n      default:\n        return state\n    }\n}\n\nexport default auth;","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nfunction resumeGaDataRetrieval(dispatch, getState){\n  var auth = getState().auth;\n\n  if (auth && auth.currentAccount && auth.currentAccount.viewId){\n    dispatch(actions.authorizeAuto());\n    dispatch(actions.gaGetRtData(auth.currentAccount.viewId));\n    dispatch(actions.gaGetData(auth.currentAccount.viewId));\n  }\n}\n\nconst network = (state = {online: navigator.onLine}, action) => {\n  switch (action.type) {\n    case actions.NETWORK_ONLINE:\n        return loop(\n          {...state, online: true},\n          Cmd.run( \n            resumeGaDataRetrieval, \n            {args: [Cmd.dispatch, Cmd.getState]}) \n        );\n    case actions.NETWORK_OFFLINE:\n      return {...state, online: false}\n    default:\n        return state\n  }\n}\n\nexport default network;","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nconst rtRefreshMs = 3000;\nconst refreshMs = 12000;\n\nfunction getRtData(viewId){\n  return window.gapi.client.analytics.data.realtime.get({\n    \"ids\": \"ga:\" + viewId,\n    \"metrics\": \"rt:activeUsers\",\n    \"dimensions\": \"rt:country\",\n    \"fields\" : \"rows,totalsForAllResults\"\n  })\n  .then(function(response) {\n    return {data: {usersNow: response.result.totalsForAllResults[\"rt:activeUsers\"], countriesAndUsersNow: response.result.rows}, viewId};\n  })\n  .catch(function (error) { \n    if (error.status === 401) return {reAuth: true, viewId}; // indicate that auth refresh is required\n\n    console.log(\"GA RT error: \"+error.status);\n  });\n}\n\nfunction getData(viewId){\n  return window.gapi.client.analytics.data.ga.get({\n    \"ids\": \"ga:\" + viewId,\n    \"start-date\": \"today\",\n    \"end-date\": \"today\",\n    \"metrics\": \"ga:users\",\n    \"dimensions\": \"ga:country\",\n    \"sort\": \"-ga:users\",\n    \"fields\" : \"rows,totalsForAllResults\"\n  })\n  .then(function(response) {\n    return {data: {usersToday: response.result.totalsForAllResults[\"ga:users\"], countriesAndUsersToday: response.result.rows}, viewId};\n  })\n  .catch(function (error) {\n    if (error.status === 401) return {reAuth: true, viewId}; // indicate that auth refresh is required\n    \n    console.log(\"GA error: \"+error.status);\n  });\n}\n\nlet timeoutRt, timeout;\n\nconst gaData = (state = {usersNow: 0, usersToday: 0}, action) => {\n\n  //GA fetch returned authorization error, might be an issue with auth token being invalidated. Repeat autherization and restart data fetching\n  if (action.type === actions.GA_RECEIVE_RT_DATA || action.type === actions.GA_RECEIVE_DATA) {\n    if (action.reAuth && action.reAuth === true){\n      return loop(\n        {...state, fetching: false},\n        Cmd.list([\n          Cmd.action({type: actions.AUTHORIZE_REFRESH_TOKEN, viewId: action.viewId})\n        ])\n      );    \n    }\n  }\n  \n  switch (action.type) {\n    case actions.GA_GET_ALL_DATA:\n        return loop(\n          state,\n          Cmd.list([\n            Cmd.action({type: actions.GA_GET_RT_DATA, viewId: action.viewId}), \n            Cmd.action({type: actions.GA_GET_DATA, viewId: action.viewId})\n          ])\n        );\n\n    case actions.GA_GET_RT_DATA:\n      clearTimeout(timeoutRt);\n      return loop(\n        {...state, fetching: true},\n          Cmd.run(() => getRtData(action.viewId), \n          {\n            successActionCreator: actions.gaReceiveRtData\n          })\n      );\n    case actions.GA_RECEIVE_RT_DATA:\n         return loop(\n          {...state, fetching: false, usersNow: action.data.usersNow, countriesAndUsersNow: action.data.countriesAndUsersNow},\n          Cmd.run( \n            (dispatch, viewId) => {timeoutRt = setTimeout(() => dispatch(actions.gaGetRtData(viewId)), rtRefreshMs)}, \n            {args: [Cmd.dispatch, action.viewId]}) \n        );\n\n    case actions.GA_GET_DATA:\n      clearTimeout(timeout);\n      return loop(\n        {...state, fetching: true},\n          Cmd.run(() => getData(action.viewId), \n          {\n            successActionCreator: actions.gaReceiveData\n          })\n      );\n    case actions.GA_RECEIVE_DATA:\n        return loop(\n          {...state, fetching: false, usersToday: action.data.usersToday, countriesAndUsersToday: action.data.countriesAndUsersToday},\n          Cmd.run( \n            (dispatch, viewId) => {timeout = setTimeout(() => dispatch(actions.gaGetData(viewId)), refreshMs)}, \n            {args: [Cmd.dispatch, action.viewId]}) \n        );\n    default:\n      return state\n  }\n}\n\nexport default gaData;","import * as actions from '../actions';\n\nconst service = (state = {}, action) => {\n  let serializedState = undefined;\n  switch (action.type) {\n    case actions.SERVICE_LOAD_STATE:\n      serializedState = localStorage.getItem('state');\n      if (serializedState === null) {\n        return state;\n      }\n      return JSON.parse(serializedState);    \n    case actions.SERVICE_PERSIST_STATE:\n      serializedState = JSON.stringify(state);\n      localStorage.setItem('state', serializedState);\n      return state;\n    default:\n        return state\n  }\n}\n\nexport default service;","// STATE MAP\n\n// s = {\n//     auth: {\n//         authorized: false,\n//         authorizing: false,\n//         currentAccount:\n//         {\n//             accountId: \"\",\n//             propertyId: \"\",\n//             viewId: \"\"\n//         },\n//         availableAccounts: []\n//     },\n//     network : {\n//         online: true\n//     },\n//     gaData: {\n//         usersNow: 0,\n//         countries: []\n//         usersToday: 0\n//         fetching: false\n//     }\n// }\n\nimport {combineReducers, reduceReducers} from 'redux-loop';\nimport auth from './auth';\nimport network from './network';\nimport gaData from './gaData';\nimport service from './service';\n\nexport default reduceReducers(service, combineReducers({auth, gaData, network}));","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom'\n\nexport default function ConditionalRoute({ component: Component, conditionEval, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={\n                props => {\n                    if (conditionEval()) {\n                        return <Component {...props} />\n                    }\n                    else {\n                        let redir =\n                            <Redirect to={{\n                                pathname: \"/auth\",\n                                state: { referrer: props.location }\n                            }}\n                            />\n\n                        return redir;\n                    }\n                }\n            }\n        />);\n}","import React from 'react';\n\nfunction Authorize({availableAccounts, currentAccount, onAccountChoice}) {\n  \n  function getItemById(list, id){\n    for (var i of list)\n      if (i.id === id) return i;\n    return null;\n  }\n\n  let accountId = null;\n  let propertyId = null;\n  let viewId = null;\n\n  if (currentAccount){\n      ({accountId, propertyId, viewId} = currentAccount);\n  }\n\n  if (accountId === null && availableAccounts && availableAccounts.length > 0 ) { \n    let acc = availableAccounts[0];\n    accountId = acc.id;\n    if (acc.properties && acc.properties.length > 0) {\n      let prp = availableAccounts[0].properties[0];\n      propertyId = prp.id;\n      if (prp.views && prp.views.length > 0) {\n        let vw = prp.views[0];\n        viewId = vw.id;\n      }\n    }\n    onAccountChoice({accountId, propertyId, viewId});\n  }\n  \n  let account = accountId ? getItemById(availableAccounts, accountId) : null;\n  let property = propertyId && account ? getItemById(account.properties, propertyId) : null;\n  let view = viewId && property ? getItemById(property.views, viewId) : null;\n\n  // Changed account, reset propertyID to the first one\n  if (account && !property) {\n    if (account.properties && account.properties.length > 0) {\n      onAccountChoice({accountId, propertyId: account.properties[0].id, viewId})\n    }\n  }\n\n  if (property && !view) {\n    if (property.views && property.views.length > 0) {\n      onAccountChoice({accountId, propertyId, viewId: property.views[0].id})\n    }\n  }\n  \n  return (\n    <div id=\"account\">\n      <span>Account</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId: e.target.value, propertyId, viewId}) } \n        value={accountId ? accountId : \"\"}>\n      {\n        account \n        && availableAccounts.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n      \n      <span>Property</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId, propertyId: e.target.value, viewId}) } \n        value={propertyId ? propertyId : \"\"}>\n      {\n        property \n        && account.properties.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n\n      <span>View</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId, propertyId, viewId: e.target.value}) } \n        value={viewId ? viewId : \"\"}>\n      {\n        view \n        && property.views.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n    </div>\n  );\n}\n\nexport default Authorize;","import {connect} from 'react-redux';\nimport * as actions from '../actions';\nimport AccountSelection from '../components/AccountSelection';\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAccountChoice: (account) => {\n      dispatch(actions.authChooseAccount(account))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountSelection);","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from '../actions';\n\nfunction Navigation ({authorized, onSignIn, onSignOut, history}) {\n  // const redirect = () => {\n  //   history.push(\"/\")\n  // } \n  \n  return (\n    <div id=\"navigation\">\n      {!authorized && <button onClick={onSignIn}>Sign in</button>}\n      {authorized && history.location.pathname === \"/auth\" && <button onClick={onSignOut}>Sign out</button>}\n      {authorized && history.location.pathname === \"/auth\" && <button onClick={() => history.push(\"/\")}>Proceed</button>}\n      {authorized && history.location.pathname !== \"/auth\" && <button onClick={() => history.push(\"/auth\")}>Switch</button>}\n    </div>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSignIn: () => {\n      dispatch(actions.authorizeManual())\n    },\n    onSignOut: () => {\n      dispatch(actions.authorizeSingout())\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","import React from 'react';\n\nfunction Status({online, authorized, currentAccount}) {\n  return (\n    <div id=\"status\">\n      {online ? \"Online; \" : \"Offline;\"}\n      {authorized ? \"Authorized; \" : \"Not Authorizded;\"}\n      {currentAccount ? \"GA Selected; \" : \"GA Not Selected;\"}\n    </div>\n  );\n}\n\nexport default Status;","import {connect} from 'react-redux';\nimport Status from '../components/Status';\n\nconst mapStateToProps = (state) => {\n  return {\n    online: state.network.online,\n    authorized: state.auth.authorized,\n    currentAccount: state.auth.currentAccount\n  }\n}\n\nexport default connect(mapStateToProps)(Status);","import React from 'react';\n\nfunction Users({users, countriesAndUsers, title}) {\n  return (\n    <div class=\"users\">\n        <h2>{title}</h2>\n        <h1>{users}</h1>\n        {\n          countriesAndUsers && countriesAndUsers.length > 0 &&\n          countriesAndUsers.map(i => <><span key={i[0]}>{i[0]}</span><span class=\"right\">{i[1]}</span><br/></>)\n        }\n    </div>\n  );\n}\n\nexport default Users;","import {connect} from 'react-redux';\nimport Users from '../components/Users';\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.gaData.usersNow,\n    countriesAndUsers: state.gaData.countriesAndUsersNow,\n    title: \"Now\"\n  }\n}\n\nexport default connect(mapStateToProps)(Users);","import {connect} from 'react-redux';\nimport Users from '../components/Users';\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.gaData.usersToday,\n    countriesAndUsers: state.gaData.countriesAndUsersToday,\n    title: \"Today\"\n  }\n}\n\nexport default connect(mapStateToProps)(Users);","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport ConditionalRoute from './misc/ConditionalRoute';\nimport AccountSelection from './containers/AccountSelection';\nimport Navigation from './containers/Navigation';\nimport Status from './containers/Status';\nimport UsersNow from './containers/UsersNow';\nimport UsersToday from './containers/UsersToday';\n\nlet basename = \"/\";\n\nif (process.env.PUBLIC_URL) {\n  basename = process.env.PUBLIC_URL;\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Provider store={window.store}>\n        <Router basename={basename}>\n          <Route component={Navigation}/>\n          <Route exact path=\"/auth\" component={AccountSelection} />\n          <div id=\"columns\">\n            <ConditionalRoute exact path=\"/\" component={UsersNow} conditionEval={() => window.store.getState().auth.authorized} />\n            <ConditionalRoute exact path=\"/\" component={UsersToday} conditionEval={() => window.store.getState().auth.authorized} />\n          </div>\n        </Router>\n        <Status />\n      </Provider>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { install } from 'redux-loop';\nimport * as actions from './actions';\nimport rootReducer from './reducers';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.store = createStore(rootReducer, {}, install());\nwindow.dispatch = window.store.dispatch;\nwindow.store.dispatch(actions.serviceLoadState());\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nlet gapiLoaded = false;\n\nfunction loadGapi() {\n  let script = document.createElement('script');\n  script.onload = function () {\n    window.gapi.load(\"auth\", () => {\n      window.gapi.client.load('analytics', 'v3').then(() => {\n        gapiLoaded = true;\n        window.dispatch(actions.authorizeAuto());\n      });\n    });\n  };\n  script.src = \"https://apis.google.com/js/client.js\";\n  document.head.appendChild(script);\n}\n\nloadGapi();\n\nwindow.addEventListener(\"online\", () => {\n  if (!gapiLoaded) loadGapi();\n  window.dispatch(actions.networkOnline());\n});\n\nwindow.addEventListener(\"offline\", () => {\n  window.dispatch(actions.networkOffline());\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}