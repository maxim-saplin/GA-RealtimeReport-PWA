{"version":3,"sources":["actions/index.js","misc/ConditionalRoute.js","reducers/auth.js","reducers/network.js","reducers/gaData.js","reducers/index.js","components/AccountSelection.js","containers/AccountSelection.js","containers/Navigation.js","components/Status.js","containers/Status.js","components/Users.js","containers/UsersNow.js","containers/UsersToday.js","App.js","serviceWorker.js","index.js"],"names":["authorizeAuto","type","authorizationFailed","autoMode","authorizationOk","authReceiveAccounts","accounts","gaGetAllData","viewId","gaGetRtData","gaReceiveRtData","data","reAuth","gaGetData","gaReceiveData","ConditionalRoute","Component","component","conditionEval","rest","render","props","to","pathname","state","referrer","location","prevViewId","CLIENT_ID","SCOPES","gapi","window","authorize","useImmdiate","authData","client_id","scope","immediate","auth","response","error","Error","getAccounts","client","load","then","analytics","management","list","result","items","length","accs","map","i","id","name","webproperties","forEach","a","properties","filter","p","accountId","profiles","views","v","webPropertyId","console","log","authorized","authorizing","action","loop","Cmd","run","successActionCreator","actions","failActionCreator","args","setToken","signOut","availableAccounts","flag","account","currentAccount","resumeGaDataRetrieval","dispatch","getState","network","online","timeoutRt","timeout","getRtData","realtime","get","usersNow","totalsForAllResults","countriesAndUsersNow","rows","catch","status","getData","ga","usersToday","countriesAndUsersToday","gaData","fetching","clearTimeout","setTimeout","combineReducers","Authorize","onAccountChoice","getItemById","propertyId","acc","prp","vw","property","view","onChange","e","target","value","key","connect","AccountSelection","onSignIn","onSignOut","history","onClick","push","Status","Users","users","countriesAndUsers","title","class","store","createStore","rootReducer","install","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","className","Navigation","exact","path","UsersNow","UsersToday","document","getElementById","addEventListener","URL","process","href","origin","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39517425.chunk.js","sourcesContent":["export const AUTHORIZE_AUTO = 'AUTHORIZE_AUTO';\nexport const AUTHORIZE_MANUAL = 'AUTHORIZE_MANUAL';\nexport const AUTHORIZE_SINGOUT = 'AUTHORIZE_SINGOUT';\nexport const AUTHORIZATION_FAILED = 'AUTHORIZATION_FAILED';\nexport const AUTHORIZATION_OK = 'AUTHORIZATION_OK';\nexport const AUTHORIZE_REFRESH_TOKEN = 'AUTHORIZE_REFRESH_TOKEN';\n\nexport const AUTH_GET_ACCOUNTS = 'AUTH_GET_ACCOUNTS';\nexport const AUTH_RECEIVE_ACCOUNTS = 'AUTH_RECEIVE_ACCOUNTS';\nexport const AUTH_CHOOSE_ACCOUNT = 'AUTH_CHOOSE_ACCOUNT';\n\nexport const GA_GET_ALL_DATA = 'GA_GET_ALL_DATA';\n//Realtime\nexport const GA_GET_RT_DATA = 'GA_GET_RT_DATA';\nexport const GA_RECEIVE_RT_DATA = 'GA_RECEIVE_RT_DATA';\nexport const GA_RECEIVE_RT_ERROR = 'GA_RECEIVE_RT_ERROR';\n// Not realtime\nexport const GA_GET_DATA = 'GA_GET_DATA';\nexport const GA_RECEIVE_DATA = 'GA_RECEIVE_DATA';\nexport const GA_RECEIVE_ERROR = 'GA_RECEIVE_ERROR';\n\nexport const NETWORK_ONLINE= 'NETWORK_ONLINE';\nexport const NETWORK_OFFLINE= 'NETWORK_OFFLINE';\n\nexport const authorizeAuto = () => ({type: AUTHORIZE_AUTO});\nexport const authorizeManual = () => ({type: AUTHORIZE_MANUAL});\nexport const authorizeSingout = () => ({type: AUTHORIZE_SINGOUT});\nexport const authorizationFailed = (autoMode) => ({type: AUTHORIZATION_FAILED, autoMode});\nexport const authorizationOk = () => ({type: AUTHORIZATION_OK});\nexport const authorizationRefreshToken = (viewId) => ({type: AUTHORIZE_REFRESH_TOKEN, viewId});\n\nexport const authGetAccounts = () => ({type: AUTH_GET_ACCOUNTS});\nexport const authReceiveAccounts = (accounts) => ({type: AUTH_RECEIVE_ACCOUNTS, accounts});\nexport const authChooseAccount = (account) => ({type: AUTH_CHOOSE_ACCOUNT, account});\n\nexport const gaGetAllData = (viewId) => ( {type: GA_GET_ALL_DATA, viewId} );\nexport const gaGetRtData = (viewId) => ({type: GA_GET_RT_DATA, viewId});\nexport const gaReceiveRtData = ({data, viewId, reAuth}) => ({type: GA_RECEIVE_RT_DATA, data, viewId, reAuth});\nexport const gaReceiveRtError = (error) => ({type: GA_RECEIVE_RT_DATA, error});\nexport const gaGetData = (viewId) => ({type: GA_GET_DATA, viewId});\nexport const gaReceiveData = ({data, viewId, reAuth}) => ({type: GA_RECEIVE_DATA, data, viewId, reAuth});\nexport const gaReceiveError = (error) => ({type: GA_RECEIVE_DATA, error});\n\n\nexport const networkOnline = () => ({type: NETWORK_ONLINE});\nexport const networkOffline = () => ({type: NETWORK_OFFLINE});","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom'\n\nexport default function ConditionalRoute({ component: Component, conditionEval, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={\n                props => {\n                    if (conditionEval()) {\n                        return <Component {...props} />\n                    }\n                    else {\n                        let redir =\n                            <Redirect to={{\n                                pathname: \"/auth\",\n                                state: { referrer: props.location }\n                            }}\n                            />\n\n                        return redir;\n                    }\n                }\n            }\n        />);\n}","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nconst CLIENT_ID = '48841825057-engcdce3j4sfo5j5v4pc3hrpe9fgv1mu.apps.googleusercontent.com';\nconst SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];\nconst gapi = window.gapi;\n\nfunction authorize(useImmdiate) {\n  const authData = {\n    client_id: CLIENT_ID,\n    scope: SCOPES,\n    immediate: useImmdiate\n  };\n\n  return gapi.auth.authorize(authData, function(response) {\n    if (response.error) {\n      throw new Error(\"GAPI - Authorization failed\");\n    }\n  });\n}\n\nfunction getAccounts(){\n  return gapi.client.load('analytics', 'v3').then(() => {\n    return gapi.client.analytics.management.accounts.list().then(\n      response => {\n        if (response.result.items && response.result.items.length) {\n\n          let accs = response.result.items.map(i => ({id: i.id, name: i.name}));\n          \n          return gapi.client.analytics.management.webproperties.list(\n            {\"accountId\": \"~all\"})\n          .then(\n            response => {\n              if (response.result.items && response.result.items.length) {\n                accs.forEach(a => {\n                  a.properties = response.result.items.filter(p => p.accountId === a.id).map(p => ({id: p.id, name: p.name}));\n                });\n\n                return gapi.client.analytics.management.profiles.list({\n                    \"accountId\": \"~all\",\n                    \"webPropertyId\": \"~all\"\n                  })\n                  .then(\n                    response => {\n                      if (response.result.items && response.result.items.length) {\n                        accs.forEach(a => {\n                          a.properties.forEach(p => {\n                            p.views = response.result.items.filter(v => v.webPropertyId === p.id).map(v => ({id: v.id, name: v.name}));\n                          });\n                        });\n\n                        return accs;\n                      }  \n                    });\n              }\n            }\n          );\n\n        } else {\n          console.log('No accounts found for this user.');\n        }\n     }\n    );\n  });\n}\n\nlet prevViewId;\n\nconst auth = (state = {authorized: false, authorizing: false}, action) => {\n    switch (action.type) {\n      case actions.AUTHORIZE_REFRESH_TOKEN:\n        return loop(\n            state,\n            Cmd.run(() => authorize(true),\n            {\n              successActionCreator: () => actions.gaGetAllData(action.viewId)\n            }\n          )\n        );\n\n      case actions.AUTHORIZE_AUTO:\n      case actions.AUTHORIZE_MANUAL:\n        return loop(\n          {...state, authorizing: true},\n            Cmd.run(() => authorize(action.type === actions.AUTHORIZE_AUTO), \n            {\n              successActionCreator: actions.authorizationOk,\n              failActionCreator: actions.authorizationFailed,\n              args: [action.type === actions.AUTHORIZE_AUTO]\n            })\n        );\n\n      case actions.AUTHORIZATION_OK:\n        return loop(\n          {...state, authorized: true, authorizing: false},\n          Cmd.action({type: actions.AUTH_GET_ACCOUNTS})\n        );\n\n      case actions.AUTHORIZATION_FAILED:\n        return {...state, authorized: false, authorizing: false};\n\n      case actions.AUTHORIZE_SINGOUT:\n          return loop(\n            {...state, authorized: false, authorizing: false},\n            Cmd.run( () => {gapi.auth.setToken(null); gapi.auth.signOut()})\n          );\n\n      case actions.AUTH_GET_ACCOUNTS:\n        return loop(  \n          state,\n          Cmd.run(() => getAccounts(), \n            {\n              successActionCreator: actions.authReceiveAccounts\n            })\n          );\n\n      case actions.AUTH_RECEIVE_ACCOUNTS:\n        return {...state, availableAccounts: action.accounts};\n\n      case actions.AUTH_CHOOSE_ACCOUNT:\n        let flag = false;  \n        if (action.account.viewId && prevViewId !== action.account.viewId) {\n          flag = true;\n          prevViewId = action.account.viewId;\n        }\n        if (flag){\n          return loop(\n            {...state, currentAccount: action.account},\n            Cmd.action({type: actions.GA_GET_ALL_DATA, viewId: action.account.viewId})\n          );\n        }\n        return {...state, currentAccount: action.account};\n\n      default:\n        return state\n    }\n}\n\nexport default auth;","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nfunction resumeGaDataRetrieval(dispatch, getState){\n  var auth = getState().auth;\n\n  if (auth && auth.currentAccount && auth.currentAccount.viewId){\n    dispatch(actions.authorizeAuto());\n    dispatch(actions.gaGetRtData(auth.currentAccount.viewId));\n    dispatch(actions.gaGetData(auth.currentAccount.viewId));\n  }\n}\n\nconst network = (state = {online: true}, action) => {\n  switch (action.type) {\n    case actions.NETWORK_ONLINE:\n        return loop(\n          {...state, online: true},\n          Cmd.run( \n            resumeGaDataRetrieval, \n            {args: [Cmd.dispatch, Cmd.getState]}) \n        );\n    case actions.NETWORK_OFFLINE:\n      return {...state, online: false}\n    default:\n        return state\n  }\n}\n\nexport default network;","import { loop, Cmd } from 'redux-loop';\nimport * as actions from '../actions';\n\nconst gapi = window.gapi;\n\nconst rtRefreshMs = 3000;\nconst refreshMs = 12000;\n\nfunction getRtData(viewId){\n  return gapi.client.analytics.data.realtime.get({\n    \"ids\": \"ga:\" + viewId,\n    \"metrics\": \"rt:activeUsers\",\n    \"dimensions\": \"rt:country\",\n    \"fields\" : \"rows,totalsForAllResults\"\n  })\n  .then(function(response) {\n    return {data: {usersNow: response.result.totalsForAllResults[\"rt:activeUsers\"], countriesAndUsersNow: response.result.rows}, viewId};\n  })\n  .catch(function (error) { \n    if (error.status === 401) return {reAuth: true, viewId}; // indicate that auth refresh is required\n\n    console.log(\"GA RT error: \"+error.status);\n  });\n}\n\nfunction getData(viewId){\n  return gapi.client.analytics.data.ga.get({\n    \"ids\": \"ga:\" + viewId,\n    \"start-date\": \"today\",\n    \"end-date\": \"today\",\n    \"metrics\": \"ga:users\",\n    \"dimensions\": \"ga:country\",\n    \"sort\": \"-ga:users\",\n    \"fields\" : \"rows,totalsForAllResults\"\n  })\n  .then(function(response) {\n    return {data: {usersToday: response.result.totalsForAllResults[\"ga:users\"], countriesAndUsersToday: response.result.rows}, viewId};\n  })\n  .catch(function (error) {\n    if (error.status === 401) return {reAuth: true, viewId}; // indicate that auth refresh is required\n    \n    console.log(\"GA error: \"+error.status);\n  });\n}\n\nlet timeoutRt, timeout;\n\nconst gaData = (state = {usersNow: 0, usersToday: 0}, action) => {\n\n  //GA fetch returned authorization error, might be an issue with auth token being invalidated. Repeat autherization and restart data fetching\n  if (action.type === actions.GA_RECEIVE_RT_DATA || action.type === actions.GA_RECEIVE_DATA) {\n    if (action.reAuth && action.reAuth === true){\n      return loop(\n        {...state, fetching: false},\n        Cmd.list([\n          Cmd.action({type: actions.AUTHORIZE_REFRESH_TOKEN, viewId: action.viewId})\n        ])\n      );    \n    }\n  }\n  \n  switch (action.type) {\n    case actions.GA_GET_ALL_DATA:\n        return loop(\n          state,\n          Cmd.list([\n            Cmd.action({type: actions.GA_GET_RT_DATA, viewId: action.viewId}), \n            Cmd.action({type: actions.GA_GET_DATA, viewId: action.viewId})\n          ])\n        );\n\n    case actions.GA_GET_RT_DATA:\n      clearTimeout(timeoutRt);\n      return loop(\n        {...state, fetching: true},\n          Cmd.run(() => getRtData(action.viewId), \n          {\n            successActionCreator: actions.gaReceiveRtData\n          })\n      );\n    case actions.GA_RECEIVE_RT_DATA:\n         return loop(\n          {...state, fetching: false, usersNow: action.data.usersNow, countriesAndUsersNow: action.data.countriesAndUsersNow},\n          Cmd.run( \n            (dispatch, viewId) => {timeoutRt = setTimeout(() => dispatch(actions.gaGetRtData(viewId)), rtRefreshMs)}, \n            {args: [Cmd.dispatch, action.viewId]}) \n        );\n\n    case actions.GA_GET_DATA:\n      clearTimeout(timeout);\n      return loop(\n        {...state, fetching: true},\n          Cmd.run(() => getData(action.viewId), \n          {\n            successActionCreator: actions.gaReceiveData\n          })\n      );\n    case actions.GA_RECEIVE_DATA:\n        return loop(\n          {...state, fetching: false, usersToday: action.data.usersToday, countriesAndUsersToday: action.data.countriesAndUsersToday},\n          Cmd.run( \n            (dispatch, viewId) => {timeout = setTimeout(() => dispatch(actions.gaGetData(viewId)), refreshMs)}, \n            {args: [Cmd.dispatch, action.viewId]}) \n        );\n    default:\n      return state\n  }\n}\n\nexport default gaData;","// STATE MAP\n\n// s = {\n//     auth: {\n//         authorized: false,\n//         authorizing: false,\n//         currentAccount:\n//         {\n//             accountId: \"\",\n//             propertyId: \"\",\n//             viewId: \"\"\n//         },\n//         availableAccounts: []\n//     },\n//     network : {\n//         online: true,\n//         lastUpdated: null,\n//         updatePeriodMs: 2000\n//     },\n//     gaData: {\n//         usersNow: 0,\n//         countries: []\n//         usersToday: 0\n//         fetching: false\n//     }\n// }\n\nimport {combineReducers } from 'redux-loop';\nimport auth from './auth';\nimport network from './network';\nimport gaData from './gaData';\n\n\nexport default combineReducers({auth, gaData, network});","import React from 'react';\n\nfunction Authorize({availableAccounts, currentAccount, onAccountChoice}) {\n  \n  function getItemById(list, id){\n    for (var i of list)\n      if (i.id === id) return i;\n    return null;\n  }\n\n  let accountId = null;\n  let propertyId = null;\n  let viewId = null;\n\n  if (currentAccount){\n      ({accountId, propertyId, viewId} = currentAccount);\n  }\n\n  if (accountId === null && availableAccounts && availableAccounts.length > 0 ) { \n    let acc = availableAccounts[0];\n    accountId = acc.id;\n    if (acc.properties && acc.properties.length > 0) {\n      let prp = availableAccounts[0].properties[0];\n      propertyId = prp.id;\n      if (prp.views && prp.views.length > 0) {\n        let vw = prp.views[0];\n        viewId = vw.id;\n      }\n    }\n    onAccountChoice({accountId, propertyId, viewId});\n  }\n  \n  let account = accountId ? getItemById(availableAccounts, accountId) : null;\n  let property = propertyId && account ? getItemById(account.properties, propertyId) : null;\n  let view = viewId && property ? getItemById(property.views, viewId) : null;\n\n  // Changed account, reset propertyID to the first one\n  if (account && !property) {\n    if (account.properties && account.properties.length > 0) {\n      onAccountChoice({accountId, propertyId: account.properties[0].id, viewId})\n    }\n  }\n\n  if (property && !view) {\n    if (property.views && property.views.length > 0) {\n      onAccountChoice({accountId, propertyId, viewId: property.views[0].id})\n    }\n  }\n  \n  return (\n    <div id=\"account\">\n      <span>Account</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId: e.target.value, propertyId, viewId}) } \n        value={accountId ? accountId : \"\"}>\n      {\n        account \n        && availableAccounts.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n      \n      <span>Property</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId, propertyId: e.target.value, viewId}) } \n        value={propertyId ? propertyId : \"\"}>\n      {\n        property \n        && account.properties.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n\n      <span>View</span>\n      <br/>\n      <select onChange={(e) => onAccountChoice({accountId, propertyId, viewId: e.target.value}) } \n        value={viewId ? viewId : \"\"}>\n      {\n        view \n        && property.views.map(i => <option key={i.id} value={i.id} >{i.name}</option>)\n      }\n      </select>\n      <br/>\n    </div>\n  );\n}\n\nexport default Authorize;","import {connect} from 'react-redux';\nimport * as actions from '../actions';\nimport AccountSelection from '../components/AccountSelection';\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAccountChoice: (account) => {\n      dispatch(actions.authChooseAccount(account))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountSelection);","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from '../actions';\n\nfunction Navigation ({authorized, onSignIn, onSignOut, history}) {\n  // const redirect = () => {\n  //   history.push(\"/\")\n  // } \n  \n  return (\n    <div id=\"navigation\">\n      {!authorized && <button onClick={onSignIn}>Sign in</button>}\n      {authorized && history.location.pathname === \"/auth\" && <button onClick={onSignOut}>Sign out</button>}\n      {authorized && history.location.pathname === \"/auth\" && <button onClick={() => history.push(\"/\")}>Proceed</button>}\n      {authorized && history.location.pathname !== \"/auth\" && <button onClick={() => history.push(\"/auth\")}>Switch</button>}\n    </div>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSignIn: () => {\n      dispatch(actions.authorizeManual())\n    },\n    onSignOut: () => {\n      dispatch(actions.authorizeSingout())\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","import React from 'react';\n\nfunction Status({online, authorized, currentAccount}) {\n  return (\n    <div id=\"status\">\n      {online ? \"Online; \" : \"Offline;\"}\n      {authorized ? \"Authorized; \" : \"Not Authorizded;\"}\n      {currentAccount ? \"GA Selected; \" : \"GA Not Selected;\"}\n    </div>\n  );\n}\n\nexport default Status;","import {connect} from 'react-redux';\nimport Status from '../components/Status';\n\nconst mapStateToProps = (state) => {\n  return {\n    online: state.network.online,\n    authorized: state.auth.authorized,\n    currentAccount: state.auth.currentAccount\n  }\n}\n\nexport default connect(mapStateToProps)(Status);","import React from 'react';\n\nfunction Users({users, countriesAndUsers, title}) {\n  return (\n    <div class=\"users\">\n        <h2>{title}</h2>\n        <h1>{users}</h1>\n        {\n          countriesAndUsers && countriesAndUsers.length > 0 &&\n          countriesAndUsers.map(i => <><span key={i[0]}>{i[0]}</span><span class=\"right\">{i[1]}</span><br/></>)\n        }\n    </div>\n  );\n}\n\nexport default Users;","import {connect} from 'react-redux';\nimport Users from '../components/Users';\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.gaData.usersNow,\n    countriesAndUsers: state.gaData.countriesAndUsersNow,\n    title: \"Now\"\n  }\n}\n\nexport default connect(mapStateToProps)(Users);","import {connect} from 'react-redux';\nimport Users from '../components/Users';\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.gaData.usersToday,\n    countriesAndUsers: state.gaData.countriesAndUsersToday,\n    title: \"Today\"\n  }\n}\n\nexport default connect(mapStateToProps)(Users);","import React from 'react';\nimport { createStore } from 'redux'\nimport { install } from 'redux-loop';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport ConditionalRoute from './misc/ConditionalRoute';\nimport rootReducer from './reducers';\nimport AccountSelection from './containers/AccountSelection';\nimport Navigation from './containers/Navigation';\nimport Status from './containers/Status';\nimport UsersNow from './containers/UsersNow';\nimport UsersToday from './containers/UsersToday';\n\nconst store = createStore(rootReducer, {}, install());\nwindow.dispatch = store.dispatch;\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <Route component={Navigation}/>\n          <Route exact path=\"/auth\" component={AccountSelection} />\n          <div id=\"columns\">\n            <ConditionalRoute exact path=\"/\" component={UsersNow} conditionEval={() => store.getState().auth.authorized} />\n            <ConditionalRoute exact path=\"/\" component={UsersToday} conditionEval={() => store.getState().auth.authorized} />\n          </div>\n        </Router>\n        <Status />\n      </Provider>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as actions from './actions';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nwindow.gapi.load(\"auth\", () => {\n  window.dispatch(actions.authorizeAuto());\n});\n\nwindow.addEventListener(\"online\", () => {\n    window.dispatch(actions.networkOnline());\n});\n\nwindow.addEventListener(\"offline\", () => {\n    window.dispatch(actions.networkOffline());\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}